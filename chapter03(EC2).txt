비용및 결제관리

root 계저에서 IAM계정으로 비용및 청구서관리 권한을 줘야함.

예산 생성
create Budget을 통해 무료 혹은 최대 10달러까지 지불할수있는 예산안을 생성


EC2
이것은 일래스틱 컴퓨트 클라우드의 약자로

AWS에서 제공하는 서비스형 인프라스트럭처입니다

즉, EC2는 하나의 서비스가 아닙니다

높은 수준에서 보면 많은 것을 포함하고 있습니다

가상 머신을 EC2에서 임대할 수 있는데

이를 EC2 인스턴스라고 합니다

데이터를 가상 드라이브 또는 EBS 볼륨에 저장할 수 있고

일래스틱 로드 밸런서로 로드는 분산시킬 수 있습니다

또 오토 스케일링 그룹(ASG)을 통해 서비스를 확장할 수 있습니다

OS
CPU
RAM
저장공간(네트워크 연결 EBS& EFS), 하드웨어(EC2 instance Store)
네트워크 종류 선택()
방화벽 규칙 선택
인스턴스 구성하기 위함 부트스트랩 스크립트

즉, EC2 사용자 데이터 스크립트를 사용하여

인스턴스를 부트스트래핑할 수 있습니다

부트스트래핑이 무슨 뜻일까요?

이는 머신이 작동될 때 명령을 시작하는 것을 말합니다

스크립트는 처음 시작할 때 한 번만 실행되고

다시 실행되지 않습니다
부팅 작업을 자동화하기 때문에 부트스트래핑이라는 이름을 갖게 됩니다

인스턴스를 부팅할 때 자동화하고 싶은 작업이 뭐가 있을까요?

업데이트하고, 소프트웨어를 설치하고

일반적인 파일을 인터넷에서 다운로드하고

여러분이 생각하는 모든 것들이

원하는 것 뭐든지 할 수 있습니다

EC2 Instance Type
AWS에는 다음과 같은 명명 규칙이 있습니다

m5.2xlarge라는 유형의 인스턴스를 예로 들어 보겠습니다

어떤 뜻이 있을까요?

m을 인스턴스 클래스로 부르겠습니다

그리고 이 인스턴스 클래스는

범용의 인스턴스입니다

5는 인스턴스의 세대를 뜻합니다

즉, AWS가 하드웨어를 계속 개선해서

새로운 세대의 하드웨어를 출시하고

m5 이후에 m 유형의 인스턴스 클래스를 개선하면

m6가 되는 것입니다 2xlarge는 인스턴스 클래스 내에서

크기를 나타냅니다

small로 시작해 large, 2xlarge

4xlarge 등의 크기가 있죠

인스턴스의 크기를 나타내며

크기가 클수록 인스턴스에

더 많은 메모리와 CPU를 가지게 됩니다

시험 관련해서는 무엇을 알아야 할까요?

그래서 몇 가지 유형의 인스턴스를 살펴보겠습니다

그러면 고성능 프로세서는 어디에 사용할까요?

일부 데이터의 일괄 처리에 사용하거나

미디어 트랜스코딩 작업 시 혹은 고성능 웹 서버가 필요하거나

고성능 컴퓨팅이라는 HPC 작업을 할 때

그리고 머신 러닝이나

전용 게임 서버가 있을 때 사용합니다

모두 훌륭한 CPU와 컴퓨팅을 요구하는 작업이며

EC2 인스턴스는 이런 특성을 가지고 있습니다

그리고 컴퓨터 최적화의 모든 인스턴스는

C로 시작하는 이름을 가지고 있습니다

C5, C6 등이죠

다음으로 메모리 최적화의 인스턴스를 살펴보겠습니다
이 유형의 인스턴스는 메모리에서 대규모 데이터셋을
처리하는 유형의 작업에 빠른 성능을 제공합니다
메모리는 RAM을 뜻하고 사용 사례를 살펴보면
대부분 인 메모리 데이터베이스가 되는
고성능의 관계형 또는 비관계형의
데이터베이스에 사용하고
일래스틱 캐시를 예로 들 수 있는
분산 웹스케일 캐시 저장소에도 사용합니다

또, 비즈니스 인텔리전스
즉, BI에 최적화된 인 메모리 데이터베이스와
대규모 비정형 데이터의 실시간 처리를 실행하는
애플리케이션에도 사용합니다
메모리 최적화 인스턴스의 이름을 살펴보면
RAM을 나타내는 R로 시작합니다
하지만 X1이나 대용량 메모리 Z1도 있습니다
이름을 기억할 필요는 없지만
전반적으로 알고 있으면 좋습니다

스토리지 최적화 인스턴스의 사용 사례로는

고주파 온라인 트랜잭션 처리인

OLTP 시스템에 사용되며

관계형과 비관계형인 NoSQL 데이터베이스에 사용합니다

데이터베이스 섹션에서 더 자세히 살펴보겠습니다

예를 들어, 레디스(Redis) 같은

메모리 데이터베이스의 캐시나 데이터 웨어하우징 애플리케이션과

분산 파일 시스템에 사용됩니다 AWS의 스토리 최적화 인스턴스는

이름이 I, D 또는 H1으로 시작합니다

기억하실 필요는 없어요

Security Group
트래픽제어
보안그룹간단 허용규칙만 포함

포트는 22번 포트로 Linux에서 EC2 인스턴스로 로그인하도록 합니다

파일 전송 프로토콜인 FTP의 포트는 21번 포트이며

파일 공유 시스템에 파일을 업로드하는데 사용됩니다

SFTP도 22번 포트를 사용하는 이유는 무엇일까요?

SSH를 사용해서 업로드하기 때문이고

보안 파일 전송 프로토콜이 되기 때문입니다

또, HTTP는 80번 포트를 사용합니다

지난 강의부터 사용하고 있죠?

보안이 되지 않은 사이트에 액세스하기 위한 것입니다

인터넷에서 많이 보셨듯이

HTTP://를 입력한 뒤 웹사이트 주소를 입력합니다

이보다 더 자주 보셨을 것은

보안 사이트에 액세스하는 HTTPS인데

현재 표준입니다

그리고 HTTPS는 443번 포트를 사용합니다

마지막으로 알아야 할 포트는

원격 데스크톱 프로토콜인 RDP의 3389번 포트이며

윈도우 인스턴스에 로그인할 때 사용됩니다

따라서 22번 포트는 Linux 인스턴스용이고

3389번 포트는 윈도우 인스턴스용 RDP입니다


ssh ec2 접근
Last login: Thu Jun  6 21:08:18 on console
angcal@AngCalui-MacBookPro ~ % aws --version
aws-cli/2.16.4 Python/3.11.8 Darwin/22.2.0 exe/x86_64
angcal@AngCalui-MacBookPro ~ % ssh ec2-user@43.203.238.76
The authenticity of host '43.203.238.76 (43.203.238.76)' can't be established.
ED25519 key fingerprint is SHA256:yIp/4mBMzVHW25dIoYLLlhT831NJAk/wIGbC2SsQINY.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '43.203.238.76' (ED25519) to the list of known hosts.
ec2-user@43.203.238.76: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
angcal@AngCalui-MacBookPro ~ % ls ~/Downloads/tuna-test-02.pem
/Users/angcal/Downloads/tuna-test-02.pem
angcal@AngCalui-MacBookPro ~ % ssh -i ~/Downloads/tuna-test-02.pem ec2-user@43.203.238.76
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for '/Users/angcal/Downloads/tuna-test-02.pem' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key "/Users/angcal/Downloads/tuna-test-02.pem": bad permissions
ec2-user@43.203.238.76: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
angcal@AngCalui-MacBookPro ~ % 
angcal@AngCalui-MacBookPro ~ % chmod ~/Downloads/tuna-test-02.pem 0400                 
chmod: Invalid file mode: /Users/angcal/Downloads/tuna-test-02.pem
angcal@AngCalui-MacBookPro ~ % chmod 0400 ~/Downloads/tuna-test-02.pem
angcal@AngCalui-MacBookPro ~ % ssh -i ~/Downloads/tuna-test-02.pem ec2-user@43.203.238.76
   ,     #_
   ~\_  ####_        Amazon Linux 2
  ~~  \_#####\
  ~~     \###|       AL2 End of Life is 2025-06-30.
  ~~       \#/ ___
   ~~       V~' '->
    ~~~         /    A newer version of Amazon Linux is available!
      ~~._.   _/
         _/ _/       Amazon Linux 2023, GA and supported until 2028-03-15.
       _/m/'           https://aws.amazon.com/linux/amazon-linux-2023/

[ec2-user@ip-100-102-0-105 ~]$ 




이 계정 상의 누구라도 다시 EC2 인스턴스 커넥트 등을 통해

EC 인스턴스에 접속을 해서

인스턴스에 입력된 자격 증명 정보를 회수할 수 있게 됩니다

절대로 그런 일이 일어나선 안 되겠죠

따라서 이런 이유로, IAM API 키를 절대로 입력하시면 안 됩니다

EC2 인스턴스에 액세스 키 ID와 비밀 액세스 키를 입력하는 건 최악의방법

EC2인스턴스 rnao 다루기***
onDemand
Reserved
SavingsPlan
Spot Instances
Dedicated Hosts
Capacity Reservations

위의 방법 정리 필요

EC2 Spot Instance에 관해
온디맨드에 비해 최대 90%까지 할인받을 수 있어요

엄청난 비용 절감 효과죠

어떻게 작동할까요?

스팟 인스턴스에 대해 지불할 수 있는 최대 스팟 가격을 정의합니다

그리고 인스턴스의 스팟 가격이 우리가 지불하고자 하는 최대 가격보다 낮다면

해당 인스턴스를 유지합니다
하지만 시간당 스팟은 오퍼와 용량에 따라 달라집니다

올라갔다가 내려갔다 하죠

현재 스팟 가격이 정의된 최대 가격을 초과하면, 두 가지를 선택할 수 있어요

이 두 가지 옵션에는 2분의 유예 기간이 있어요

작업을 수행할 수 있는 시간이 약간 주어지는 거죠

먼저, 인스턴스를 중지하는 거에요, 즉 하던 작업을 모두 중지하고

인스턴스를 중지하는 거죠

그러다 어느 날 스팟 가격이 최대 가격 아래로 내려가면, 인스턴스를 다시 시작하고

중단했던 곳부터 재개하는 거죠, 또는 EC2 인스턴스에서 상태가 필요하지 않다면

그냥 인스턴스를 종료해 버리면 됩니다

그러면 언제든 작업을 다시 시작할 때 새로운 EC2 인스턴스로

시작할 수 있죠

이렇게 워크로드 유형에 따라 두 가지 옵션이 있어요, 유예 기간은 2분

있고요

만약 AWS가 스팟 인스턴스를 회수하는 것을 원하지 않는다면, 스팟 블록을 사용할 수 있어요

스팟 블록은 지정된 기간 동안 스팟 인스턴스를 차단하는 거에요

1~6시간까지 가능해요, 그동안 중단 없이 해당 블록을 사용할 수 있다고 규정되어 있어요

문서에 있어요

하지만 아주 드물게 인스턴스가 회수되는 경우도 있어요

하지만 일반적으로 스팟 블록에서는 인스턴스가 회수되지 않습니다, 그게 스팟 블록의

존재 목적이죠

그렇다면 스팟 인스턴스는 언제 사용할까요? 배치 작업 및

데이터 분석, 장애 복원력이 뛰어난 워크로드 등에 사용해요, 중요한 작업이나 데이터베이스에는

적합하지 않습니다


스팟인스턴스 종료 방법
스팟 요청
원하는 인스턴스 수, 최대가격 및 시작사양(예 AMI)
언제부터 언제까지 유효한지 정함.

그리고 스팟 요청을 취소하고 싶을 때는

즉, 왼쪽에서 스팟 요청을 받고 취소하는 경우에는

이전에 시작한 인스턴스를 종료하는 게 아닙니다

인스턴스를 종료하는 것은 여러분이 할 일이지, AWS가 하는 일이 아니에요

따라서 스팟 인스턴스를 완전히 종료하고, 다시 시작하지 않으려면

먼저 스팟 요청을 취소하고, 그 다음에 관련 스팟 인스턴스를 종료해야 합니다

왜냐하면 여러분이 스팟 인스턴스를 먼저 종료하면, AWS는 스팟 요청으로 다시 돌아가서

'6개의 인스턴스를 원한다고 했는데 현재 인스턴스는 0개 있군'이라고 하면서

6개의 인스턴스를 시작해 버리죠

따라서 스팟 인스턴스를 종료하려면, 먼저 스팟 요청을 취소해야 합니다

AWS가 새 인스턴스를 시작하지 않도록요

그리고 나서 관련된 스팟 인스턴스를 종료해야 합니다

이 부분은 시험에 나올 수 있기 때문에 자세히 설명드렸어요

스팟 블릿
스팟인스턴스 세트를 정의 하는 방법
선택적으로 온디멘드 인스턴스 세트
플릿(무리)
우리가 정의한 목푯 용량을 충족하기 위해 촤ㅣ선을 다함
가능한 런치 풀에서 시작.
다양한 인스턴스 유형, 다양한 Oㄴ및 다양한 가요성 영역을 가질수 있음.

따라서 스팟 플릿에 스팟 인스턴스를 할당하는 전략을 정의해야 합니다

이건 기억해 두셔야 해요

첫 번째는 최저 가격인데요, 시험에서 가장 자주 나오는 거에요

스팟 플릿은, 가장 낮은 가격인 풀에서 인스턴스를 시작하기 때문에

비용이 최적화되죠

워크로드가 매우 짧은 경우 좋은 옵션이에요, 또한 다양한 방법으로 스팟 인스턴스를

실행할 수 있어요, 이 경우 스팟 인스턴스는 여러분이 정의한

모든 풀에 분산됩니다, 이건 가용성과 긴 워크로드에 적합해요, 왜냐하면

한 풀이 사라져도 다른 풀은 여전히 활성화되어 있으니까요, 그리고 용량 최적화가 있어요

원하는 인스턴스 수에 맞는 최적의 용량을 가진 풀을 갖게 되죠, 그리고

가격 용량 최적화는, 먼저 사용 가능한 용량이 가장 큰 풀을 선택하고

그 중 가격이 가장 낮은 풀을 선택하는 전략이에요, 대부분의 워크로드에 가장 적합한 선택이죠

스팟 플릿은 복잡해 보이지만 이것만 기억해 두세요, 스팟 플릿을 사용하면

여러 개의 런치 풀과 여러 인스턴스 유형을 정의할 수 있어요

원시 전력만 신경쓰면 되죠

스팟 플릿에서 최저가 할인 또는 최저가 전략을 사용하면

스팟 플릿이 자동으로 가장 낮은 가격의 스팟 인스턴스를 요청합니다

스팟 플릿은 스팟 인스턴스를 기반으로 추가 비용을 절감할 수 있어요

적절한 스팟 인스턴스 풀을 선택하여 최대로 비용을 절감할 수 있을 만큼 똑똑하기 때문입니다

이것이 바로 스팟 플릿의 장점입니다

다시 한 번 말씀드리지만 차이점을 잘 아셔야 해요, 간단한 스팟 인스턴스 요청을 하는 경우는

원하는 인스턴스 유형과 AZ를 정확히 알고 있는 경우죠, 스팟 플릿을 요청하는 경우는

조건을 만족하는 모든 인스턴스 유형과 모든 AZ를 선택하라는 거에요, 조건은 예를 들어

가장 낮은 가격으로 하고요